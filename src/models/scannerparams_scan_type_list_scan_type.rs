/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ScannerparamsScanTypeListScanType {
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  /// Instrument types separated by a comma which are supported for this scan type
  #[serde(rename = "instruments")]
  instruments: Option<String>,
  /// scan code which ahs to be provided while querying scanner with this scan type
  #[serde(rename = "scanCode")]
  scan_code: Option<String>
}

impl ScannerparamsScanTypeListScanType {
  pub fn new() -> ScannerparamsScanTypeListScanType {
    ScannerparamsScanTypeListScanType {
      display_name: None,
      instruments: None,
      scan_code: None
    }
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> ScannerparamsScanTypeListScanType {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_instruments(&mut self, instruments: String) {
    self.instruments = Some(instruments);
  }

  pub fn with_instruments(mut self, instruments: String) -> ScannerparamsScanTypeListScanType {
    self.instruments = Some(instruments);
    self
  }

  pub fn instruments(&self) -> Option<&String> {
    self.instruments.as_ref()
  }

  pub fn reset_instruments(&mut self) {
    self.instruments = None;
  }

  pub fn set_scan_code(&mut self, scan_code: String) {
    self.scan_code = Some(scan_code);
  }

  pub fn with_scan_code(mut self, scan_code: String) -> ScannerparamsScanTypeListScanType {
    self.scan_code = Some(scan_code);
    self
  }

  pub fn scan_code(&self) -> Option<&String> {
    self.scan_code.as_ref()
  }

  pub fn reset_scan_code(&mut self) {
    self.scan_code = None;
  }

}



