/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse20022 {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "parameters")]
  parameters: Option<Vec<::models::IservercontractconidalgosParameters>>
}

impl InlineResponse20022 {
  pub fn new() -> InlineResponse20022 {
    InlineResponse20022 {
      description: None,
      id: None,
      name: None,
      parameters: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> InlineResponse20022 {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> InlineResponse20022 {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> InlineResponse20022 {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_parameters(&mut self, parameters: Vec<::models::IservercontractconidalgosParameters>) {
    self.parameters = Some(parameters);
  }

  pub fn with_parameters(mut self, parameters: Vec<::models::IservercontractconidalgosParameters>) -> InlineResponse20022 {
    self.parameters = Some(parameters);
    self
  }

  pub fn parameters(&self) -> Option<&Vec<::models::IservercontractconidalgosParameters>> {
    self.parameters.as_ref()
  }

  pub fn reset_parameters(&mut self) {
    self.parameters = None;
  }

}



