/* 
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NotificationsInner : notification

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NotificationsInner {
  /// notification date
  #[serde(rename = "D")]
  D: Option<String>,
  /// unique way to reference this notification
  #[serde(rename = "ID")]
  ID: Option<String>,
  /// FYI code, we can use it to find whether the disclaimer is accepted or not in settings
  #[serde(rename = "FC")]
  FC: Option<String>,
  /// content of notification
  #[serde(rename = "MD")]
  MD: Option<String>,
  /// title of notification
  #[serde(rename = "MS")]
  MS: Option<String>,
  /// 0-unread, 1-read
  #[serde(rename = "R")]
  R: Option<String>
}

impl NotificationsInner {
  /// notification
  pub fn new() -> NotificationsInner {
    NotificationsInner {
      D: None,
      ID: None,
      FC: None,
      MD: None,
      MS: None,
      R: None
    }
  }

  pub fn set_D(&mut self, D: String) {
    self.D = Some(D);
  }

  pub fn with_D(mut self, D: String) -> NotificationsInner {
    self.D = Some(D);
    self
  }

  pub fn D(&self) -> Option<&String> {
    self.D.as_ref()
  }

  pub fn reset_D(&mut self) {
    self.D = None;
  }

  pub fn set_ID(&mut self, ID: String) {
    self.ID = Some(ID);
  }

  pub fn with_ID(mut self, ID: String) -> NotificationsInner {
    self.ID = Some(ID);
    self
  }

  pub fn ID(&self) -> Option<&String> {
    self.ID.as_ref()
  }

  pub fn reset_ID(&mut self) {
    self.ID = None;
  }

  pub fn set_FC(&mut self, FC: String) {
    self.FC = Some(FC);
  }

  pub fn with_FC(mut self, FC: String) -> NotificationsInner {
    self.FC = Some(FC);
    self
  }

  pub fn FC(&self) -> Option<&String> {
    self.FC.as_ref()
  }

  pub fn reset_FC(&mut self) {
    self.FC = None;
  }

  pub fn set_MD(&mut self, MD: String) {
    self.MD = Some(MD);
  }

  pub fn with_MD(mut self, MD: String) -> NotificationsInner {
    self.MD = Some(MD);
    self
  }

  pub fn MD(&self) -> Option<&String> {
    self.MD.as_ref()
  }

  pub fn reset_MD(&mut self) {
    self.MD = None;
  }

  pub fn set_MS(&mut self, MS: String) {
    self.MS = Some(MS);
  }

  pub fn with_MS(mut self, MS: String) -> NotificationsInner {
    self.MS = Some(MS);
    self
  }

  pub fn MS(&self) -> Option<&String> {
    self.MS.as_ref()
  }

  pub fn reset_MS(&mut self) {
    self.MS = None;
  }

  pub fn set_R(&mut self, R: String) {
    self.R = Some(R);
  }

  pub fn with_R(mut self, R: String) -> NotificationsInner {
    self.R = Some(R);
    self
  }

  pub fn R(&self) -> Option<&String> {
    self.R.as_ref()
  }

  pub fn reset_R(&mut self) {
    self.R = None;
  }

}



