/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InlineResponse20037Sessions : If the LIQUID hours differs from the total trading day then a separate 'session' tag is returned.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse20037Sessions {
  #[serde(rename = "closingTime")]
  closing_time: Option<i32>,
  #[serde(rename = "openingTime")]
  opening_time: Option<i32>,
  /// If the whole trading day is considered LIQUID then the value 'LIQUID' is returned.
  #[serde(rename = "prop")]
  prop: Option<String>
}

impl InlineResponse20037Sessions {
  /// If the LIQUID hours differs from the total trading day then a separate 'session' tag is returned.
  pub fn new() -> InlineResponse20037Sessions {
    InlineResponse20037Sessions {
      closing_time: None,
      opening_time: None,
      prop: None
    }
  }

  pub fn set_closing_time(&mut self, closing_time: i32) {
    self.closing_time = Some(closing_time);
  }

  pub fn with_closing_time(mut self, closing_time: i32) -> InlineResponse20037Sessions {
    self.closing_time = Some(closing_time);
    self
  }

  pub fn closing_time(&self) -> Option<&i32> {
    self.closing_time.as_ref()
  }

  pub fn reset_closing_time(&mut self) {
    self.closing_time = None;
  }

  pub fn set_opening_time(&mut self, opening_time: i32) {
    self.opening_time = Some(opening_time);
  }

  pub fn with_opening_time(mut self, opening_time: i32) -> InlineResponse20037Sessions {
    self.opening_time = Some(opening_time);
    self
  }

  pub fn opening_time(&self) -> Option<&i32> {
    self.opening_time.as_ref()
  }

  pub fn reset_opening_time(&mut self) {
    self.opening_time = None;
  }

  pub fn set_prop(&mut self, prop: String) {
    self.prop = Some(prop);
  }

  pub fn with_prop(mut self, prop: String) -> InlineResponse20037Sessions {
    self.prop = Some(prop);
    self
  }

  pub fn prop(&self) -> Option<&String> {
    self.prop.as_ref()
  }

  pub fn reset_prop(&mut self) {
    self.prop = None;
  }

}



