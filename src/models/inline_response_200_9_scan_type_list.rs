/* 
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2009ScanTypeList {
  #[serde(rename = "display_name")]
  display_name: Option<String>,
  #[serde(rename = "code")]
  code: Option<String>,
  #[serde(rename = "instruments")]
  instruments: Option<Vec<String>>
}

impl InlineResponse2009ScanTypeList {
  pub fn new() -> InlineResponse2009ScanTypeList {
    InlineResponse2009ScanTypeList {
      display_name: None,
      code: None,
      instruments: None
    }
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> InlineResponse2009ScanTypeList {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_code(&mut self, code: String) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: String) -> InlineResponse2009ScanTypeList {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&String> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_instruments(&mut self, instruments: Vec<String>) {
    self.instruments = Some(instruments);
  }

  pub fn with_instruments(mut self, instruments: Vec<String>) -> InlineResponse2009ScanTypeList {
    self.instruments = Some(instruments);
    self
  }

  pub fn instruments(&self) -> Option<&Vec<String>> {
    self.instruments.as_ref()
  }

  pub fn reset_instruments(&mut self) {
    self.instruments = None;
  }

}



