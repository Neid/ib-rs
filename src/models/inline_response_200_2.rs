/* 
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2002 {
  #[serde(rename = "orders")]
  orders: Option<Vec<::models::Order>>,
  #[serde(rename = "notifications")]
  notifications: Option<Vec<Value>>
}

impl InlineResponse2002 {
  pub fn new() -> InlineResponse2002 {
    InlineResponse2002 {
      orders: None,
      notifications: None
    }
  }

  pub fn set_orders(&mut self, orders: Vec<::models::Order>) {
    self.orders = Some(orders);
  }

  pub fn with_orders(mut self, orders: Vec<::models::Order>) -> InlineResponse2002 {
    self.orders = Some(orders);
    self
  }

  pub fn orders(&self) -> Option<&Vec<::models::Order>> {
    self.orders.as_ref()
  }

  pub fn reset_orders(&mut self) {
    self.orders = None;
  }

  pub fn set_notifications(&mut self, notifications: Vec<Value>) {
    self.notifications = Some(notifications);
  }

  pub fn with_notifications(mut self, notifications: Vec<Value>) -> InlineResponse2002 {
    self.notifications = Some(notifications);
    self
  }

  pub fn notifications(&self) -> Option<&Vec<Value>> {
    self.notifications.as_ref()
  }

  pub fn reset_notifications(&mut self) {
    self.notifications = None;
  }

}



