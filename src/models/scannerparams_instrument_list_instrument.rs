/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ScannerparamsInstrumentListInstrument {
  /// Supported filters for the instrument separated by a comma
  #[serde(rename = "filters")]
  filters: Option<String>,
  /// Display name for the instrument
  #[serde(rename = "name")]
  name: Option<String>,
  /// Sec Type of the instrument. This field is not provided if its value is same as 'type'
  #[serde(rename = "secType")]
  sec_type: Option<String>,
  #[serde(rename = "shortName")]
  short_name: Option<String>,
  /// Type of the asset
  #[serde(rename = "type")]
  _type: Option<String>
}

impl ScannerparamsInstrumentListInstrument {
  pub fn new() -> ScannerparamsInstrumentListInstrument {
    ScannerparamsInstrumentListInstrument {
      filters: None,
      name: None,
      sec_type: None,
      short_name: None,
      _type: None
    }
  }

  pub fn set_filters(&mut self, filters: String) {
    self.filters = Some(filters);
  }

  pub fn with_filters(mut self, filters: String) -> ScannerparamsInstrumentListInstrument {
    self.filters = Some(filters);
    self
  }

  pub fn filters(&self) -> Option<&String> {
    self.filters.as_ref()
  }

  pub fn reset_filters(&mut self) {
    self.filters = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ScannerparamsInstrumentListInstrument {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_sec_type(&mut self, sec_type: String) {
    self.sec_type = Some(sec_type);
  }

  pub fn with_sec_type(mut self, sec_type: String) -> ScannerparamsInstrumentListInstrument {
    self.sec_type = Some(sec_type);
    self
  }

  pub fn sec_type(&self) -> Option<&String> {
    self.sec_type.as_ref()
  }

  pub fn reset_sec_type(&mut self) {
    self.sec_type = None;
  }

  pub fn set_short_name(&mut self, short_name: String) {
    self.short_name = Some(short_name);
  }

  pub fn with_short_name(mut self, short_name: String) -> ScannerparamsInstrumentListInstrument {
    self.short_name = Some(short_name);
    self
  }

  pub fn short_name(&self) -> Option<&String> {
    self.short_name.as_ref()
  }

  pub fn reset_short_name(&mut self) {
    self.short_name = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> ScannerparamsInstrumentListInstrument {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



