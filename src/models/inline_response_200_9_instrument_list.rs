/* 
 * Client Portal Web API
 *
 * Production version of the Client Portal Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2009InstrumentList {
  #[serde(rename = "display_name")]
  display_name: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "filters")]
  filters: Option<Vec<String>>
}

impl InlineResponse2009InstrumentList {
  pub fn new() -> InlineResponse2009InstrumentList {
    InlineResponse2009InstrumentList {
      display_name: None,
      _type: None,
      filters: None
    }
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> InlineResponse2009InstrumentList {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> InlineResponse2009InstrumentList {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_filters(&mut self, filters: Vec<String>) {
    self.filters = Some(filters);
  }

  pub fn with_filters(mut self, filters: Vec<String>) -> InlineResponse2009InstrumentList {
    self.filters = Some(filters);
    self
  }

  pub fn filters(&self) -> Option<&Vec<String>> {
    self.filters.as_ref()
  }

  pub fn reset_filters(&mut self) {
    self.filters = None;
  }

}



