/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse20024 {
  /// Last Price - The last price at which the contract traded. \"C\" identifies this price as the previous day's closing price. \"H\" means that the trading is halted.
  #[serde(rename = "31")]
  var_31: Option<String>,
  /// Symbol
  #[serde(rename = "55")]
  var_55: Option<String>,
  /// Text
  #[serde(rename = "58")]
  var_58: Option<String>,
  /// Exchange
  #[serde(rename = "6004")]
  var_6004: Option<String>,
  /// Conid - Contract identifier from IBKR's database.
  #[serde(rename = "6008")]
  var_6008: Option<i32>,
  /// SecType - The asset class of the instrument.
  #[serde(rename = "6070")]
  var_6070: Option<String>,
  /// Months
  #[serde(rename = "6072")]
  var_6072: Option<String>,
  /// Regular Expiry
  #[serde(rename = "6073")]
  var_6073: Option<String>,
  /// Marker for market data delivery method (similar to request id)
  #[serde(rename = "6119")]
  var_6119: Option<String>,
  /// Underlying Conid. Use /trsrv/secdef to get more information about the security
  #[serde(rename = "6457")]
  var_6457: Option<i32>,
  /// Market Data Availability. The field may contain two chars. The first char is the primary code: R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated. The third char defines: B = Book 
  #[serde(rename = "6509")]
  var_6509: Option<String>,
  /// High - Current day high price
  #[serde(rename = "70")]
  var_70: Option<String>,
  /// Company name
  #[serde(rename = "7051")]
  var_7051: Option<String>,
  /// Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY 
  #[serde(rename = "7057")]
  var_7057: Option<String>,
  /// Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY 
  #[serde(rename = "7058")]
  var_7058: Option<String>,
  /// Last Size - The number of unites traded at the last price
  #[serde(rename = "7059")]
  var_7059: Option<String>,
  /// Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY 
  #[serde(rename = "7068")]
  var_7068: Option<String>,
  /// Implied Vol./Hist. Vol % - The ratio of the implied volatility over the historical volatility, expressed as a percentage.
  #[serde(rename = "7084")]
  var_7084: Option<String>,
  /// Put/Call Interest - Put option open interest/call option open interest for the trading day.
  #[serde(rename = "7085")]
  var_7085: Option<String>,
  /// Put/Call Volume - Put option volume/call option volume for the trading day.
  #[serde(rename = "7086")]
  var_7086: Option<String>,
  /// Hist. Vol. % - 30-day real-time historical volatility.
  #[serde(rename = "7087")]
  var_7087: Option<String>,
  /// Hist. Vol. Close % - Shows the historical volatility based on previous close price.
  #[serde(rename = "7088")]
  var_7088: Option<String>,
  /// Opt. Volume - Option Volume
  #[serde(rename = "7089")]
  var_7089: Option<String>,
  /// Conid + Exchange
  #[serde(rename = "7094")]
  var_7094: Option<String>,
  /// Low - Current day low price
  #[serde(rename = "71")]
  var_71: Option<String>,
  /// canBeTraded - If contract is a trade-able instrument. Returns 1(true) or 0(false).
  #[serde(rename = "7184")]
  var_7184: Option<String>,
  /// Position - The current aggregate position for the specified account or group.
  #[serde(rename = "72")]
  var_72: Option<String>,
  /// Contract Description
  #[serde(rename = "7219")]
  var_7219: Option<String>,
  /// Contract Description
  #[serde(rename = "7220")]
  var_7220: Option<String>,
  /// Listing Exchange
  #[serde(rename = "7221")]
  var_7221: Option<String>,
  /// Industry - Displays the type of industry under which the underlying company can be categorized.
  #[serde(rename = "7280")]
  var_7280: Option<String>,
  /// Category - Displays a more detailed level of description within the industry under which the underlying company can be categorized.
  #[serde(rename = "7281")]
  var_7281: Option<String>,
  /// Average Volume - The average daily trading volume over 90 days.
  #[serde(rename = "7282")]
  var_7282: Option<String>,
  /// Option Implied Vol. % - A prediction of how volatile an underlying will be in the future. At the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months. To query the Implied Vol. % of a specific strike refer to field 7633. 
  #[serde(rename = "7283")]
  var_7283: Option<String>,
  /// Historic Volume (30d)
  #[serde(rename = "7284")]
  var_7284: Option<String>,
  /// Put/Call Ratio
  #[serde(rename = "7285")]
  var_7285: Option<String>,
  /// Dividend Amount - Displays the amount of the next dividend.
  #[serde(rename = "7286")]
  var_7286: Option<String>,
  /// Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage. For derivatives, this displays the total of the expected dividend payments over the expiry date. 
  #[serde(rename = "7287")]
  var_7287: Option<String>,
  /// Ex-date of the dividend
  #[serde(rename = "7288")]
  var_7288: Option<String>,
  /// Market Cap
  #[serde(rename = "7289")]
  var_7289: Option<String>,
  /// P/E
  #[serde(rename = "7290")]
  var_7290: Option<String>,
  /// EPS
  #[serde(rename = "7291")]
  var_7291: Option<String>,
  /// Cost Basis - Your current position in this security multiplied by the average price and multiplier.
  #[serde(rename = "7292")]
  var_7292: Option<String>,
  /// 52 Week High - The highest price for the past 52 weeks.
  #[serde(rename = "7293")]
  var_7293: Option<String>,
  /// 52 Week Low - The lowest price for the past 52 weeks.
  #[serde(rename = "7294")]
  var_7294: Option<String>,
  /// Open - Today's opening price.
  #[serde(rename = "7295")]
  var_7295: Option<String>,
  /// Close - Today's closing price.
  #[serde(rename = "7296")]
  var_7296: Option<String>,
  /// Market Value - The current market value of  your position in the security. Market Value is calculated with realtime market data (even when not subscribed to market data).
  #[serde(rename = "73")]
  var_73: Option<String>,
  /// Delta - The ratio of the change in the price of the option to the corresponding change in the price of the underlying.
  #[serde(rename = "7308")]
  var_7308: Option<String>,
  /// Gamma - The rate of change for the delta with respect to the underlying asset's price.
  #[serde(rename = "7309")]
  var_7309: Option<String>,
  /// Theta - A measure of the rate of decline the value of an option due to the passage of time.
  #[serde(rename = "7310")]
  var_7310: Option<String>,
  /// Vega - The amount that the price of an option changes compared to a 1% change in the volatility.
  #[serde(rename = "7311")]
  var_7311: Option<String>,
  /// Avg Price - The average price of the position.
  #[serde(rename = "74")]
  var_74: Option<String>,
  /// Unrealized PnL - Unrealized profit or loss. Unrealized PnL is calculated with realtime market data (even when not subscribed to market data).
  #[serde(rename = "75")]
  var_75: Option<String>,
  /// Formatted position
  #[serde(rename = "76")]
  var_76: Option<String>,
  /// Opt. Volume Change % - Today's option volume as a percentage of the average option volume.
  #[serde(rename = "7607")]
  var_7607: Option<String>,
  /// Implied Vol. % - The implied volatility for the specific strike of the option in percentage. To query the Option Implied Vol. % from the underlying refer to field 7283.  
  #[serde(rename = "7633")]
  var_7633: Option<String>,
  /// Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price.
  #[serde(rename = "7635")]
  var_7635: Option<String>,
  /// Shortable Shares - Number of shares available for shorting.
  #[serde(rename = "7636")]
  var_7636: Option<String>,
  /// Fee Rate - Interest rate charged on borrowed shares.
  #[serde(rename = "7637")]
  var_7637: Option<String>,
  /// Option Open Interest
  #[serde(rename = "7638")]
  var_7638: Option<String>,
  /// % of Mark Value - Displays the market value of the contract as a percentage of the total market value of the account. Daily PnL is calculated with realtime market data (even when not subscribed to market data). 
  #[serde(rename = "7639")]
  var_7639: Option<String>,
  /// Shortable - Describes the level of difficulty with which the security can be sold short.
  #[serde(rename = "7644")]
  var_7644: Option<String>,
  /// Morningstar Rating - Displays Morningstar Rating provided value. Requires [Morningstar](https://www.interactivebrokers.com/en/index.php?f=14262) subscription.
  #[serde(rename = "7655")]
  var_7655: Option<String>,
  /// Dividends - This value is the total of the expected dividend payments over the next twelve months per share.
  #[serde(rename = "7671")]
  var_7671: Option<String>,
  /// Dividends TTM - This value is the total of the expected dividend payments over the last twelve months per share.
  #[serde(rename = "7672")]
  var_7672: Option<String>,
  /// EMA(200) - Exponential moving average (N=200).
  #[serde(rename = "7674")]
  var_7674: Option<String>,
  /// EMA(100) - Exponential moving average (N=100).
  #[serde(rename = "7675")]
  var_7675: Option<String>,
  /// EMA(50) - Exponential moving average (N=50).
  #[serde(rename = "7676")]
  var_7676: Option<String>,
  /// EMA(20) - Exponential moving average (N=20).
  #[serde(rename = "7677")]
  var_7677: Option<String>,
  /// Price/EMA(200) - Price to Exponential moving average (N=200) ratio -1, displayed in percents.
  #[serde(rename = "7678")]
  var_7678: Option<String>,
  /// Price/EMA(100) - Price to Exponential moving average (N=100) ratio -1, displayed in percents.
  #[serde(rename = "7679")]
  var_7679: Option<String>,
  /// Price/EMA(50) - Price to Exponential moving average (N=50) ratio -1, displayed in percents.
  #[serde(rename = "7680")]
  var_7680: Option<String>,
  /// Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents.
  #[serde(rename = "7681")]
  var_7681: Option<String>,
  /// Change Since Open - The difference between the last price and the open price.
  #[serde(rename = "7682")]
  var_7682: Option<String>,
  /// Upcoming Event - Shows the next major company event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7683")]
  var_7683: Option<String>,
  /// Upcoming Event Date - The date of the next major company event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7684")]
  var_7684: Option<String>,
  /// Upcoming Analyst Meeting - The date and time of the next scheduled analyst meeting. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7685")]
  var_7685: Option<String>,
  /// Upcoming Earnings - The date and time of the next scheduled earnings/earnings call event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7686")]
  var_7686: Option<String>,
  /// Upcoming Misc Event - The date and time of the next shareholder meeting, presentation or other event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7687")]
  var_7687: Option<String>,
  /// Recent Analyst Meeting - The date and time of the most recent analyst meeting. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7688")]
  var_7688: Option<String>,
  /// Recent Earnings - The date and time of the most recent earnings/earning call event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7689")]
  var_7689: Option<String>,
  /// Recent Misc Event - The date and time of the most recent shareholder meeting, presentation or other event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription.
  #[serde(rename = "7690")]
  var_7690: Option<String>,
  /// Probability of Max Return - Customer implied probability of maximum potential gain.
  #[serde(rename = "7694")]
  var_7694: Option<String>,
  /// Break Even - Break even points
  #[serde(rename = "7695")]
  var_7695: Option<String>,
  /// SPX Delta - Beta Weighted Delta is calculated using the formula; Delta x dollar adjusted beta, where adjusted beta is adjusted by the ratio of the close price.
  #[serde(rename = "7696")]
  var_7696: Option<String>,
  /// Futures Open Interest - Total number of outstanding futures contracts
  #[serde(rename = "7697")]
  var_7697: Option<String>,
  /// Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher. 
  #[serde(rename = "7698")]
  var_7698: Option<String>,
  /// Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher. 
  #[serde(rename = "7699")]
  var_7699: Option<String>,
  /// Formatted Unrealized PnL
  #[serde(rename = "77")]
  var_77: Option<String>,
  /// Probability of Max Return - Customer implied probability of maximum potential gain.
  #[serde(rename = "7700")]
  var_7700: Option<String>,
  /// Probability of Max Loss - Customer implied probability of maximum potential loss.
  #[serde(rename = "7702")]
  var_7702: Option<String>,
  /// Profit Probability - Customer implied probability of any gain.
  #[serde(rename = "7703")]
  var_7703: Option<String>,
  /// Organization Type
  #[serde(rename = "7704")]
  var_7704: Option<String>,
  /// Debt Class
  #[serde(rename = "7705")]
  var_7705: Option<String>,
  /// Ratings - Ratings issued for bond contract.
  #[serde(rename = "7706")]
  var_7706: Option<String>,
  /// Bond State Code
  #[serde(rename = "7707")]
  var_7707: Option<String>,
  /// Bond Type
  #[serde(rename = "7708")]
  var_7708: Option<String>,
  /// Last Trading Date
  #[serde(rename = "7714")]
  var_7714: Option<String>,
  /// Issue Date
  #[serde(rename = "7715")]
  var_7715: Option<String>,
  /// Beta - Beta is against standard index.
  #[serde(rename = "7718")]
  var_7718: Option<String>,
  /// Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher. 
  #[serde(rename = "7720")]
  var_7720: Option<String>,
  /// Prior Close - Yesterday's closing price
  #[serde(rename = "7741")]
  var_7741: Option<String>,
  /// Volume Long - High precision volume for the day. For formatted volume refer to field 87.
  #[serde(rename = "7762")]
  var_7762: Option<String>,
  /// hasTradingPermissions - if user has trading permissions for specified contract. Returns 1(true) or 0(false).
  #[serde(rename = "7768")]
  var_7768: Option<String>,
  /// Daily PnL - Your profit or loss of the day since prior close. Daily PnL is calculated with realtime market data (even when not subscribed to market data).
  #[serde(rename = "78")]
  var_78: Option<String>,
  /// Change - The difference between the last price and the close on the previous trading day
  #[serde(rename = "82")]
  var_82: Option<String>,
  /// Change % - The difference between the last price and the close on the previous trading day in percentage.
  #[serde(rename = "83")]
  var_83: Option<String>,
  /// Bid Price - The highest-priced bid on the contract.
  #[serde(rename = "84")]
  var_84: Option<String>,
  /// Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100.
  #[serde(rename = "85")]
  var_85: Option<String>,
  /// Ask Price - The lowest-priced offer on the contract.
  #[serde(rename = "86")]
  var_86: Option<String>,
  /// Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762.
  #[serde(rename = "87")]
  var_87: Option<String>,
  /// Raw Volume - Volume for the day, provided in long form without formatted with K/M. This field value is deprecated, for high precision volume refer to field 7762.
  #[serde(rename = "87_raw (deprecated)")]
  var_87_raw__deprecated: Option<String>,
  /// Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100.
  #[serde(rename = "88")]
  var_88: Option<String>,
  #[serde(rename = "_updated")]
  _updated: Option<i32>,
  #[serde(rename = "conid")]
  conid: Option<i32>,
  #[serde(rename = "server_id")]
  server_id: Option<String>
}

impl InlineResponse20024 {
  pub fn new() -> InlineResponse20024 {
    InlineResponse20024 {
      var_31: None,
      var_55: None,
      var_58: None,
      var_6004: None,
      var_6008: None,
      var_6070: None,
      var_6072: None,
      var_6073: None,
      var_6119: None,
      var_6457: None,
      var_6509: None,
      var_70: None,
      var_7051: None,
      var_7057: None,
      var_7058: None,
      var_7059: None,
      var_7068: None,
      var_7084: None,
      var_7085: None,
      var_7086: None,
      var_7087: None,
      var_7088: None,
      var_7089: None,
      var_7094: None,
      var_71: None,
      var_7184: None,
      var_72: None,
      var_7219: None,
      var_7220: None,
      var_7221: None,
      var_7280: None,
      var_7281: None,
      var_7282: None,
      var_7283: None,
      var_7284: None,
      var_7285: None,
      var_7286: None,
      var_7287: None,
      var_7288: None,
      var_7289: None,
      var_7290: None,
      var_7291: None,
      var_7292: None,
      var_7293: None,
      var_7294: None,
      var_7295: None,
      var_7296: None,
      var_73: None,
      var_7308: None,
      var_7309: None,
      var_7310: None,
      var_7311: None,
      var_74: None,
      var_75: None,
      var_76: None,
      var_7607: None,
      var_7633: None,
      var_7635: None,
      var_7636: None,
      var_7637: None,
      var_7638: None,
      var_7639: None,
      var_7644: None,
      var_7655: None,
      var_7671: None,
      var_7672: None,
      var_7674: None,
      var_7675: None,
      var_7676: None,
      var_7677: None,
      var_7678: None,
      var_7679: None,
      var_7680: None,
      var_7681: None,
      var_7682: None,
      var_7683: None,
      var_7684: None,
      var_7685: None,
      var_7686: None,
      var_7687: None,
      var_7688: None,
      var_7689: None,
      var_7690: None,
      var_7694: None,
      var_7695: None,
      var_7696: None,
      var_7697: None,
      var_7698: None,
      var_7699: None,
      var_77: None,
      var_7700: None,
      var_7702: None,
      var_7703: None,
      var_7704: None,
      var_7705: None,
      var_7706: None,
      var_7707: None,
      var_7708: None,
      var_7714: None,
      var_7715: None,
      var_7718: None,
      var_7720: None,
      var_7741: None,
      var_7762: None,
      var_7768: None,
      var_78: None,
      var_82: None,
      var_83: None,
      var_84: None,
      var_85: None,
      var_86: None,
      var_87: None,
      var_87_raw__deprecated: None,
      var_88: None,
      _updated: None,
      conid: None,
      server_id: None
    }
  }

  pub fn set_var_31(&mut self, var_31: String) {
    self.var_31 = Some(var_31);
  }

  pub fn with_var_31(mut self, var_31: String) -> InlineResponse20024 {
    self.var_31 = Some(var_31);
    self
  }

  pub fn var_31(&self) -> Option<&String> {
    self.var_31.as_ref()
  }

  pub fn reset_var_31(&mut self) {
    self.var_31 = None;
  }

  pub fn set_var_55(&mut self, var_55: String) {
    self.var_55 = Some(var_55);
  }

  pub fn with_var_55(mut self, var_55: String) -> InlineResponse20024 {
    self.var_55 = Some(var_55);
    self
  }

  pub fn var_55(&self) -> Option<&String> {
    self.var_55.as_ref()
  }

  pub fn reset_var_55(&mut self) {
    self.var_55 = None;
  }

  pub fn set_var_58(&mut self, var_58: String) {
    self.var_58 = Some(var_58);
  }

  pub fn with_var_58(mut self, var_58: String) -> InlineResponse20024 {
    self.var_58 = Some(var_58);
    self
  }

  pub fn var_58(&self) -> Option<&String> {
    self.var_58.as_ref()
  }

  pub fn reset_var_58(&mut self) {
    self.var_58 = None;
  }

  pub fn set_var_6004(&mut self, var_6004: String) {
    self.var_6004 = Some(var_6004);
  }

  pub fn with_var_6004(mut self, var_6004: String) -> InlineResponse20024 {
    self.var_6004 = Some(var_6004);
    self
  }

  pub fn var_6004(&self) -> Option<&String> {
    self.var_6004.as_ref()
  }

  pub fn reset_var_6004(&mut self) {
    self.var_6004 = None;
  }

  pub fn set_var_6008(&mut self, var_6008: i32) {
    self.var_6008 = Some(var_6008);
  }

  pub fn with_var_6008(mut self, var_6008: i32) -> InlineResponse20024 {
    self.var_6008 = Some(var_6008);
    self
  }

  pub fn var_6008(&self) -> Option<&i32> {
    self.var_6008.as_ref()
  }

  pub fn reset_var_6008(&mut self) {
    self.var_6008 = None;
  }

  pub fn set_var_6070(&mut self, var_6070: String) {
    self.var_6070 = Some(var_6070);
  }

  pub fn with_var_6070(mut self, var_6070: String) -> InlineResponse20024 {
    self.var_6070 = Some(var_6070);
    self
  }

  pub fn var_6070(&self) -> Option<&String> {
    self.var_6070.as_ref()
  }

  pub fn reset_var_6070(&mut self) {
    self.var_6070 = None;
  }

  pub fn set_var_6072(&mut self, var_6072: String) {
    self.var_6072 = Some(var_6072);
  }

  pub fn with_var_6072(mut self, var_6072: String) -> InlineResponse20024 {
    self.var_6072 = Some(var_6072);
    self
  }

  pub fn var_6072(&self) -> Option<&String> {
    self.var_6072.as_ref()
  }

  pub fn reset_var_6072(&mut self) {
    self.var_6072 = None;
  }

  pub fn set_var_6073(&mut self, var_6073: String) {
    self.var_6073 = Some(var_6073);
  }

  pub fn with_var_6073(mut self, var_6073: String) -> InlineResponse20024 {
    self.var_6073 = Some(var_6073);
    self
  }

  pub fn var_6073(&self) -> Option<&String> {
    self.var_6073.as_ref()
  }

  pub fn reset_var_6073(&mut self) {
    self.var_6073 = None;
  }

  pub fn set_var_6119(&mut self, var_6119: String) {
    self.var_6119 = Some(var_6119);
  }

  pub fn with_var_6119(mut self, var_6119: String) -> InlineResponse20024 {
    self.var_6119 = Some(var_6119);
    self
  }

  pub fn var_6119(&self) -> Option<&String> {
    self.var_6119.as_ref()
  }

  pub fn reset_var_6119(&mut self) {
    self.var_6119 = None;
  }

  pub fn set_var_6457(&mut self, var_6457: i32) {
    self.var_6457 = Some(var_6457);
  }

  pub fn with_var_6457(mut self, var_6457: i32) -> InlineResponse20024 {
    self.var_6457 = Some(var_6457);
    self
  }

  pub fn var_6457(&self) -> Option<&i32> {
    self.var_6457.as_ref()
  }

  pub fn reset_var_6457(&mut self) {
    self.var_6457 = None;
  }

  pub fn set_var_6509(&mut self, var_6509: String) {
    self.var_6509 = Some(var_6509);
  }

  pub fn with_var_6509(mut self, var_6509: String) -> InlineResponse20024 {
    self.var_6509 = Some(var_6509);
    self
  }

  pub fn var_6509(&self) -> Option<&String> {
    self.var_6509.as_ref()
  }

  pub fn reset_var_6509(&mut self) {
    self.var_6509 = None;
  }

  pub fn set_var_70(&mut self, var_70: String) {
    self.var_70 = Some(var_70);
  }

  pub fn with_var_70(mut self, var_70: String) -> InlineResponse20024 {
    self.var_70 = Some(var_70);
    self
  }

  pub fn var_70(&self) -> Option<&String> {
    self.var_70.as_ref()
  }

  pub fn reset_var_70(&mut self) {
    self.var_70 = None;
  }

  pub fn set_var_7051(&mut self, var_7051: String) {
    self.var_7051 = Some(var_7051);
  }

  pub fn with_var_7051(mut self, var_7051: String) -> InlineResponse20024 {
    self.var_7051 = Some(var_7051);
    self
  }

  pub fn var_7051(&self) -> Option<&String> {
    self.var_7051.as_ref()
  }

  pub fn reset_var_7051(&mut self) {
    self.var_7051 = None;
  }

  pub fn set_var_7057(&mut self, var_7057: String) {
    self.var_7057 = Some(var_7057);
  }

  pub fn with_var_7057(mut self, var_7057: String) -> InlineResponse20024 {
    self.var_7057 = Some(var_7057);
    self
  }

  pub fn var_7057(&self) -> Option<&String> {
    self.var_7057.as_ref()
  }

  pub fn reset_var_7057(&mut self) {
    self.var_7057 = None;
  }

  pub fn set_var_7058(&mut self, var_7058: String) {
    self.var_7058 = Some(var_7058);
  }

  pub fn with_var_7058(mut self, var_7058: String) -> InlineResponse20024 {
    self.var_7058 = Some(var_7058);
    self
  }

  pub fn var_7058(&self) -> Option<&String> {
    self.var_7058.as_ref()
  }

  pub fn reset_var_7058(&mut self) {
    self.var_7058 = None;
  }

  pub fn set_var_7059(&mut self, var_7059: String) {
    self.var_7059 = Some(var_7059);
  }

  pub fn with_var_7059(mut self, var_7059: String) -> InlineResponse20024 {
    self.var_7059 = Some(var_7059);
    self
  }

  pub fn var_7059(&self) -> Option<&String> {
    self.var_7059.as_ref()
  }

  pub fn reset_var_7059(&mut self) {
    self.var_7059 = None;
  }

  pub fn set_var_7068(&mut self, var_7068: String) {
    self.var_7068 = Some(var_7068);
  }

  pub fn with_var_7068(mut self, var_7068: String) -> InlineResponse20024 {
    self.var_7068 = Some(var_7068);
    self
  }

  pub fn var_7068(&self) -> Option<&String> {
    self.var_7068.as_ref()
  }

  pub fn reset_var_7068(&mut self) {
    self.var_7068 = None;
  }

  pub fn set_var_7084(&mut self, var_7084: String) {
    self.var_7084 = Some(var_7084);
  }

  pub fn with_var_7084(mut self, var_7084: String) -> InlineResponse20024 {
    self.var_7084 = Some(var_7084);
    self
  }

  pub fn var_7084(&self) -> Option<&String> {
    self.var_7084.as_ref()
  }

  pub fn reset_var_7084(&mut self) {
    self.var_7084 = None;
  }

  pub fn set_var_7085(&mut self, var_7085: String) {
    self.var_7085 = Some(var_7085);
  }

  pub fn with_var_7085(mut self, var_7085: String) -> InlineResponse20024 {
    self.var_7085 = Some(var_7085);
    self
  }

  pub fn var_7085(&self) -> Option<&String> {
    self.var_7085.as_ref()
  }

  pub fn reset_var_7085(&mut self) {
    self.var_7085 = None;
  }

  pub fn set_var_7086(&mut self, var_7086: String) {
    self.var_7086 = Some(var_7086);
  }

  pub fn with_var_7086(mut self, var_7086: String) -> InlineResponse20024 {
    self.var_7086 = Some(var_7086);
    self
  }

  pub fn var_7086(&self) -> Option<&String> {
    self.var_7086.as_ref()
  }

  pub fn reset_var_7086(&mut self) {
    self.var_7086 = None;
  }

  pub fn set_var_7087(&mut self, var_7087: String) {
    self.var_7087 = Some(var_7087);
  }

  pub fn with_var_7087(mut self, var_7087: String) -> InlineResponse20024 {
    self.var_7087 = Some(var_7087);
    self
  }

  pub fn var_7087(&self) -> Option<&String> {
    self.var_7087.as_ref()
  }

  pub fn reset_var_7087(&mut self) {
    self.var_7087 = None;
  }

  pub fn set_var_7088(&mut self, var_7088: String) {
    self.var_7088 = Some(var_7088);
  }

  pub fn with_var_7088(mut self, var_7088: String) -> InlineResponse20024 {
    self.var_7088 = Some(var_7088);
    self
  }

  pub fn var_7088(&self) -> Option<&String> {
    self.var_7088.as_ref()
  }

  pub fn reset_var_7088(&mut self) {
    self.var_7088 = None;
  }

  pub fn set_var_7089(&mut self, var_7089: String) {
    self.var_7089 = Some(var_7089);
  }

  pub fn with_var_7089(mut self, var_7089: String) -> InlineResponse20024 {
    self.var_7089 = Some(var_7089);
    self
  }

  pub fn var_7089(&self) -> Option<&String> {
    self.var_7089.as_ref()
  }

  pub fn reset_var_7089(&mut self) {
    self.var_7089 = None;
  }

  pub fn set_var_7094(&mut self, var_7094: String) {
    self.var_7094 = Some(var_7094);
  }

  pub fn with_var_7094(mut self, var_7094: String) -> InlineResponse20024 {
    self.var_7094 = Some(var_7094);
    self
  }

  pub fn var_7094(&self) -> Option<&String> {
    self.var_7094.as_ref()
  }

  pub fn reset_var_7094(&mut self) {
    self.var_7094 = None;
  }

  pub fn set_var_71(&mut self, var_71: String) {
    self.var_71 = Some(var_71);
  }

  pub fn with_var_71(mut self, var_71: String) -> InlineResponse20024 {
    self.var_71 = Some(var_71);
    self
  }

  pub fn var_71(&self) -> Option<&String> {
    self.var_71.as_ref()
  }

  pub fn reset_var_71(&mut self) {
    self.var_71 = None;
  }

  pub fn set_var_7184(&mut self, var_7184: String) {
    self.var_7184 = Some(var_7184);
  }

  pub fn with_var_7184(mut self, var_7184: String) -> InlineResponse20024 {
    self.var_7184 = Some(var_7184);
    self
  }

  pub fn var_7184(&self) -> Option<&String> {
    self.var_7184.as_ref()
  }

  pub fn reset_var_7184(&mut self) {
    self.var_7184 = None;
  }

  pub fn set_var_72(&mut self, var_72: String) {
    self.var_72 = Some(var_72);
  }

  pub fn with_var_72(mut self, var_72: String) -> InlineResponse20024 {
    self.var_72 = Some(var_72);
    self
  }

  pub fn var_72(&self) -> Option<&String> {
    self.var_72.as_ref()
  }

  pub fn reset_var_72(&mut self) {
    self.var_72 = None;
  }

  pub fn set_var_7219(&mut self, var_7219: String) {
    self.var_7219 = Some(var_7219);
  }

  pub fn with_var_7219(mut self, var_7219: String) -> InlineResponse20024 {
    self.var_7219 = Some(var_7219);
    self
  }

  pub fn var_7219(&self) -> Option<&String> {
    self.var_7219.as_ref()
  }

  pub fn reset_var_7219(&mut self) {
    self.var_7219 = None;
  }

  pub fn set_var_7220(&mut self, var_7220: String) {
    self.var_7220 = Some(var_7220);
  }

  pub fn with_var_7220(mut self, var_7220: String) -> InlineResponse20024 {
    self.var_7220 = Some(var_7220);
    self
  }

  pub fn var_7220(&self) -> Option<&String> {
    self.var_7220.as_ref()
  }

  pub fn reset_var_7220(&mut self) {
    self.var_7220 = None;
  }

  pub fn set_var_7221(&mut self, var_7221: String) {
    self.var_7221 = Some(var_7221);
  }

  pub fn with_var_7221(mut self, var_7221: String) -> InlineResponse20024 {
    self.var_7221 = Some(var_7221);
    self
  }

  pub fn var_7221(&self) -> Option<&String> {
    self.var_7221.as_ref()
  }

  pub fn reset_var_7221(&mut self) {
    self.var_7221 = None;
  }

  pub fn set_var_7280(&mut self, var_7280: String) {
    self.var_7280 = Some(var_7280);
  }

  pub fn with_var_7280(mut self, var_7280: String) -> InlineResponse20024 {
    self.var_7280 = Some(var_7280);
    self
  }

  pub fn var_7280(&self) -> Option<&String> {
    self.var_7280.as_ref()
  }

  pub fn reset_var_7280(&mut self) {
    self.var_7280 = None;
  }

  pub fn set_var_7281(&mut self, var_7281: String) {
    self.var_7281 = Some(var_7281);
  }

  pub fn with_var_7281(mut self, var_7281: String) -> InlineResponse20024 {
    self.var_7281 = Some(var_7281);
    self
  }

  pub fn var_7281(&self) -> Option<&String> {
    self.var_7281.as_ref()
  }

  pub fn reset_var_7281(&mut self) {
    self.var_7281 = None;
  }

  pub fn set_var_7282(&mut self, var_7282: String) {
    self.var_7282 = Some(var_7282);
  }

  pub fn with_var_7282(mut self, var_7282: String) -> InlineResponse20024 {
    self.var_7282 = Some(var_7282);
    self
  }

  pub fn var_7282(&self) -> Option<&String> {
    self.var_7282.as_ref()
  }

  pub fn reset_var_7282(&mut self) {
    self.var_7282 = None;
  }

  pub fn set_var_7283(&mut self, var_7283: String) {
    self.var_7283 = Some(var_7283);
  }

  pub fn with_var_7283(mut self, var_7283: String) -> InlineResponse20024 {
    self.var_7283 = Some(var_7283);
    self
  }

  pub fn var_7283(&self) -> Option<&String> {
    self.var_7283.as_ref()
  }

  pub fn reset_var_7283(&mut self) {
    self.var_7283 = None;
  }

  pub fn set_var_7284(&mut self, var_7284: String) {
    self.var_7284 = Some(var_7284);
  }

  pub fn with_var_7284(mut self, var_7284: String) -> InlineResponse20024 {
    self.var_7284 = Some(var_7284);
    self
  }

  pub fn var_7284(&self) -> Option<&String> {
    self.var_7284.as_ref()
  }

  pub fn reset_var_7284(&mut self) {
    self.var_7284 = None;
  }

  pub fn set_var_7285(&mut self, var_7285: String) {
    self.var_7285 = Some(var_7285);
  }

  pub fn with_var_7285(mut self, var_7285: String) -> InlineResponse20024 {
    self.var_7285 = Some(var_7285);
    self
  }

  pub fn var_7285(&self) -> Option<&String> {
    self.var_7285.as_ref()
  }

  pub fn reset_var_7285(&mut self) {
    self.var_7285 = None;
  }

  pub fn set_var_7286(&mut self, var_7286: String) {
    self.var_7286 = Some(var_7286);
  }

  pub fn with_var_7286(mut self, var_7286: String) -> InlineResponse20024 {
    self.var_7286 = Some(var_7286);
    self
  }

  pub fn var_7286(&self) -> Option<&String> {
    self.var_7286.as_ref()
  }

  pub fn reset_var_7286(&mut self) {
    self.var_7286 = None;
  }

  pub fn set_var_7287(&mut self, var_7287: String) {
    self.var_7287 = Some(var_7287);
  }

  pub fn with_var_7287(mut self, var_7287: String) -> InlineResponse20024 {
    self.var_7287 = Some(var_7287);
    self
  }

  pub fn var_7287(&self) -> Option<&String> {
    self.var_7287.as_ref()
  }

  pub fn reset_var_7287(&mut self) {
    self.var_7287 = None;
  }

  pub fn set_var_7288(&mut self, var_7288: String) {
    self.var_7288 = Some(var_7288);
  }

  pub fn with_var_7288(mut self, var_7288: String) -> InlineResponse20024 {
    self.var_7288 = Some(var_7288);
    self
  }

  pub fn var_7288(&self) -> Option<&String> {
    self.var_7288.as_ref()
  }

  pub fn reset_var_7288(&mut self) {
    self.var_7288 = None;
  }

  pub fn set_var_7289(&mut self, var_7289: String) {
    self.var_7289 = Some(var_7289);
  }

  pub fn with_var_7289(mut self, var_7289: String) -> InlineResponse20024 {
    self.var_7289 = Some(var_7289);
    self
  }

  pub fn var_7289(&self) -> Option<&String> {
    self.var_7289.as_ref()
  }

  pub fn reset_var_7289(&mut self) {
    self.var_7289 = None;
  }

  pub fn set_var_7290(&mut self, var_7290: String) {
    self.var_7290 = Some(var_7290);
  }

  pub fn with_var_7290(mut self, var_7290: String) -> InlineResponse20024 {
    self.var_7290 = Some(var_7290);
    self
  }

  pub fn var_7290(&self) -> Option<&String> {
    self.var_7290.as_ref()
  }

  pub fn reset_var_7290(&mut self) {
    self.var_7290 = None;
  }

  pub fn set_var_7291(&mut self, var_7291: String) {
    self.var_7291 = Some(var_7291);
  }

  pub fn with_var_7291(mut self, var_7291: String) -> InlineResponse20024 {
    self.var_7291 = Some(var_7291);
    self
  }

  pub fn var_7291(&self) -> Option<&String> {
    self.var_7291.as_ref()
  }

  pub fn reset_var_7291(&mut self) {
    self.var_7291 = None;
  }

  pub fn set_var_7292(&mut self, var_7292: String) {
    self.var_7292 = Some(var_7292);
  }

  pub fn with_var_7292(mut self, var_7292: String) -> InlineResponse20024 {
    self.var_7292 = Some(var_7292);
    self
  }

  pub fn var_7292(&self) -> Option<&String> {
    self.var_7292.as_ref()
  }

  pub fn reset_var_7292(&mut self) {
    self.var_7292 = None;
  }

  pub fn set_var_7293(&mut self, var_7293: String) {
    self.var_7293 = Some(var_7293);
  }

  pub fn with_var_7293(mut self, var_7293: String) -> InlineResponse20024 {
    self.var_7293 = Some(var_7293);
    self
  }

  pub fn var_7293(&self) -> Option<&String> {
    self.var_7293.as_ref()
  }

  pub fn reset_var_7293(&mut self) {
    self.var_7293 = None;
  }

  pub fn set_var_7294(&mut self, var_7294: String) {
    self.var_7294 = Some(var_7294);
  }

  pub fn with_var_7294(mut self, var_7294: String) -> InlineResponse20024 {
    self.var_7294 = Some(var_7294);
    self
  }

  pub fn var_7294(&self) -> Option<&String> {
    self.var_7294.as_ref()
  }

  pub fn reset_var_7294(&mut self) {
    self.var_7294 = None;
  }

  pub fn set_var_7295(&mut self, var_7295: String) {
    self.var_7295 = Some(var_7295);
  }

  pub fn with_var_7295(mut self, var_7295: String) -> InlineResponse20024 {
    self.var_7295 = Some(var_7295);
    self
  }

  pub fn var_7295(&self) -> Option<&String> {
    self.var_7295.as_ref()
  }

  pub fn reset_var_7295(&mut self) {
    self.var_7295 = None;
  }

  pub fn set_var_7296(&mut self, var_7296: String) {
    self.var_7296 = Some(var_7296);
  }

  pub fn with_var_7296(mut self, var_7296: String) -> InlineResponse20024 {
    self.var_7296 = Some(var_7296);
    self
  }

  pub fn var_7296(&self) -> Option<&String> {
    self.var_7296.as_ref()
  }

  pub fn reset_var_7296(&mut self) {
    self.var_7296 = None;
  }

  pub fn set_var_73(&mut self, var_73: String) {
    self.var_73 = Some(var_73);
  }

  pub fn with_var_73(mut self, var_73: String) -> InlineResponse20024 {
    self.var_73 = Some(var_73);
    self
  }

  pub fn var_73(&self) -> Option<&String> {
    self.var_73.as_ref()
  }

  pub fn reset_var_73(&mut self) {
    self.var_73 = None;
  }

  pub fn set_var_7308(&mut self, var_7308: String) {
    self.var_7308 = Some(var_7308);
  }

  pub fn with_var_7308(mut self, var_7308: String) -> InlineResponse20024 {
    self.var_7308 = Some(var_7308);
    self
  }

  pub fn var_7308(&self) -> Option<&String> {
    self.var_7308.as_ref()
  }

  pub fn reset_var_7308(&mut self) {
    self.var_7308 = None;
  }

  pub fn set_var_7309(&mut self, var_7309: String) {
    self.var_7309 = Some(var_7309);
  }

  pub fn with_var_7309(mut self, var_7309: String) -> InlineResponse20024 {
    self.var_7309 = Some(var_7309);
    self
  }

  pub fn var_7309(&self) -> Option<&String> {
    self.var_7309.as_ref()
  }

  pub fn reset_var_7309(&mut self) {
    self.var_7309 = None;
  }

  pub fn set_var_7310(&mut self, var_7310: String) {
    self.var_7310 = Some(var_7310);
  }

  pub fn with_var_7310(mut self, var_7310: String) -> InlineResponse20024 {
    self.var_7310 = Some(var_7310);
    self
  }

  pub fn var_7310(&self) -> Option<&String> {
    self.var_7310.as_ref()
  }

  pub fn reset_var_7310(&mut self) {
    self.var_7310 = None;
  }

  pub fn set_var_7311(&mut self, var_7311: String) {
    self.var_7311 = Some(var_7311);
  }

  pub fn with_var_7311(mut self, var_7311: String) -> InlineResponse20024 {
    self.var_7311 = Some(var_7311);
    self
  }

  pub fn var_7311(&self) -> Option<&String> {
    self.var_7311.as_ref()
  }

  pub fn reset_var_7311(&mut self) {
    self.var_7311 = None;
  }

  pub fn set_var_74(&mut self, var_74: String) {
    self.var_74 = Some(var_74);
  }

  pub fn with_var_74(mut self, var_74: String) -> InlineResponse20024 {
    self.var_74 = Some(var_74);
    self
  }

  pub fn var_74(&self) -> Option<&String> {
    self.var_74.as_ref()
  }

  pub fn reset_var_74(&mut self) {
    self.var_74 = None;
  }

  pub fn set_var_75(&mut self, var_75: String) {
    self.var_75 = Some(var_75);
  }

  pub fn with_var_75(mut self, var_75: String) -> InlineResponse20024 {
    self.var_75 = Some(var_75);
    self
  }

  pub fn var_75(&self) -> Option<&String> {
    self.var_75.as_ref()
  }

  pub fn reset_var_75(&mut self) {
    self.var_75 = None;
  }

  pub fn set_var_76(&mut self, var_76: String) {
    self.var_76 = Some(var_76);
  }

  pub fn with_var_76(mut self, var_76: String) -> InlineResponse20024 {
    self.var_76 = Some(var_76);
    self
  }

  pub fn var_76(&self) -> Option<&String> {
    self.var_76.as_ref()
  }

  pub fn reset_var_76(&mut self) {
    self.var_76 = None;
  }

  pub fn set_var_7607(&mut self, var_7607: String) {
    self.var_7607 = Some(var_7607);
  }

  pub fn with_var_7607(mut self, var_7607: String) -> InlineResponse20024 {
    self.var_7607 = Some(var_7607);
    self
  }

  pub fn var_7607(&self) -> Option<&String> {
    self.var_7607.as_ref()
  }

  pub fn reset_var_7607(&mut self) {
    self.var_7607 = None;
  }

  pub fn set_var_7633(&mut self, var_7633: String) {
    self.var_7633 = Some(var_7633);
  }

  pub fn with_var_7633(mut self, var_7633: String) -> InlineResponse20024 {
    self.var_7633 = Some(var_7633);
    self
  }

  pub fn var_7633(&self) -> Option<&String> {
    self.var_7633.as_ref()
  }

  pub fn reset_var_7633(&mut self) {
    self.var_7633 = None;
  }

  pub fn set_var_7635(&mut self, var_7635: String) {
    self.var_7635 = Some(var_7635);
  }

  pub fn with_var_7635(mut self, var_7635: String) -> InlineResponse20024 {
    self.var_7635 = Some(var_7635);
    self
  }

  pub fn var_7635(&self) -> Option<&String> {
    self.var_7635.as_ref()
  }

  pub fn reset_var_7635(&mut self) {
    self.var_7635 = None;
  }

  pub fn set_var_7636(&mut self, var_7636: String) {
    self.var_7636 = Some(var_7636);
  }

  pub fn with_var_7636(mut self, var_7636: String) -> InlineResponse20024 {
    self.var_7636 = Some(var_7636);
    self
  }

  pub fn var_7636(&self) -> Option<&String> {
    self.var_7636.as_ref()
  }

  pub fn reset_var_7636(&mut self) {
    self.var_7636 = None;
  }

  pub fn set_var_7637(&mut self, var_7637: String) {
    self.var_7637 = Some(var_7637);
  }

  pub fn with_var_7637(mut self, var_7637: String) -> InlineResponse20024 {
    self.var_7637 = Some(var_7637);
    self
  }

  pub fn var_7637(&self) -> Option<&String> {
    self.var_7637.as_ref()
  }

  pub fn reset_var_7637(&mut self) {
    self.var_7637 = None;
  }

  pub fn set_var_7638(&mut self, var_7638: String) {
    self.var_7638 = Some(var_7638);
  }

  pub fn with_var_7638(mut self, var_7638: String) -> InlineResponse20024 {
    self.var_7638 = Some(var_7638);
    self
  }

  pub fn var_7638(&self) -> Option<&String> {
    self.var_7638.as_ref()
  }

  pub fn reset_var_7638(&mut self) {
    self.var_7638 = None;
  }

  pub fn set_var_7639(&mut self, var_7639: String) {
    self.var_7639 = Some(var_7639);
  }

  pub fn with_var_7639(mut self, var_7639: String) -> InlineResponse20024 {
    self.var_7639 = Some(var_7639);
    self
  }

  pub fn var_7639(&self) -> Option<&String> {
    self.var_7639.as_ref()
  }

  pub fn reset_var_7639(&mut self) {
    self.var_7639 = None;
  }

  pub fn set_var_7644(&mut self, var_7644: String) {
    self.var_7644 = Some(var_7644);
  }

  pub fn with_var_7644(mut self, var_7644: String) -> InlineResponse20024 {
    self.var_7644 = Some(var_7644);
    self
  }

  pub fn var_7644(&self) -> Option<&String> {
    self.var_7644.as_ref()
  }

  pub fn reset_var_7644(&mut self) {
    self.var_7644 = None;
  }

  pub fn set_var_7655(&mut self, var_7655: String) {
    self.var_7655 = Some(var_7655);
  }

  pub fn with_var_7655(mut self, var_7655: String) -> InlineResponse20024 {
    self.var_7655 = Some(var_7655);
    self
  }

  pub fn var_7655(&self) -> Option<&String> {
    self.var_7655.as_ref()
  }

  pub fn reset_var_7655(&mut self) {
    self.var_7655 = None;
  }

  pub fn set_var_7671(&mut self, var_7671: String) {
    self.var_7671 = Some(var_7671);
  }

  pub fn with_var_7671(mut self, var_7671: String) -> InlineResponse20024 {
    self.var_7671 = Some(var_7671);
    self
  }

  pub fn var_7671(&self) -> Option<&String> {
    self.var_7671.as_ref()
  }

  pub fn reset_var_7671(&mut self) {
    self.var_7671 = None;
  }

  pub fn set_var_7672(&mut self, var_7672: String) {
    self.var_7672 = Some(var_7672);
  }

  pub fn with_var_7672(mut self, var_7672: String) -> InlineResponse20024 {
    self.var_7672 = Some(var_7672);
    self
  }

  pub fn var_7672(&self) -> Option<&String> {
    self.var_7672.as_ref()
  }

  pub fn reset_var_7672(&mut self) {
    self.var_7672 = None;
  }

  pub fn set_var_7674(&mut self, var_7674: String) {
    self.var_7674 = Some(var_7674);
  }

  pub fn with_var_7674(mut self, var_7674: String) -> InlineResponse20024 {
    self.var_7674 = Some(var_7674);
    self
  }

  pub fn var_7674(&self) -> Option<&String> {
    self.var_7674.as_ref()
  }

  pub fn reset_var_7674(&mut self) {
    self.var_7674 = None;
  }

  pub fn set_var_7675(&mut self, var_7675: String) {
    self.var_7675 = Some(var_7675);
  }

  pub fn with_var_7675(mut self, var_7675: String) -> InlineResponse20024 {
    self.var_7675 = Some(var_7675);
    self
  }

  pub fn var_7675(&self) -> Option<&String> {
    self.var_7675.as_ref()
  }

  pub fn reset_var_7675(&mut self) {
    self.var_7675 = None;
  }

  pub fn set_var_7676(&mut self, var_7676: String) {
    self.var_7676 = Some(var_7676);
  }

  pub fn with_var_7676(mut self, var_7676: String) -> InlineResponse20024 {
    self.var_7676 = Some(var_7676);
    self
  }

  pub fn var_7676(&self) -> Option<&String> {
    self.var_7676.as_ref()
  }

  pub fn reset_var_7676(&mut self) {
    self.var_7676 = None;
  }

  pub fn set_var_7677(&mut self, var_7677: String) {
    self.var_7677 = Some(var_7677);
  }

  pub fn with_var_7677(mut self, var_7677: String) -> InlineResponse20024 {
    self.var_7677 = Some(var_7677);
    self
  }

  pub fn var_7677(&self) -> Option<&String> {
    self.var_7677.as_ref()
  }

  pub fn reset_var_7677(&mut self) {
    self.var_7677 = None;
  }

  pub fn set_var_7678(&mut self, var_7678: String) {
    self.var_7678 = Some(var_7678);
  }

  pub fn with_var_7678(mut self, var_7678: String) -> InlineResponse20024 {
    self.var_7678 = Some(var_7678);
    self
  }

  pub fn var_7678(&self) -> Option<&String> {
    self.var_7678.as_ref()
  }

  pub fn reset_var_7678(&mut self) {
    self.var_7678 = None;
  }

  pub fn set_var_7679(&mut self, var_7679: String) {
    self.var_7679 = Some(var_7679);
  }

  pub fn with_var_7679(mut self, var_7679: String) -> InlineResponse20024 {
    self.var_7679 = Some(var_7679);
    self
  }

  pub fn var_7679(&self) -> Option<&String> {
    self.var_7679.as_ref()
  }

  pub fn reset_var_7679(&mut self) {
    self.var_7679 = None;
  }

  pub fn set_var_7680(&mut self, var_7680: String) {
    self.var_7680 = Some(var_7680);
  }

  pub fn with_var_7680(mut self, var_7680: String) -> InlineResponse20024 {
    self.var_7680 = Some(var_7680);
    self
  }

  pub fn var_7680(&self) -> Option<&String> {
    self.var_7680.as_ref()
  }

  pub fn reset_var_7680(&mut self) {
    self.var_7680 = None;
  }

  pub fn set_var_7681(&mut self, var_7681: String) {
    self.var_7681 = Some(var_7681);
  }

  pub fn with_var_7681(mut self, var_7681: String) -> InlineResponse20024 {
    self.var_7681 = Some(var_7681);
    self
  }

  pub fn var_7681(&self) -> Option<&String> {
    self.var_7681.as_ref()
  }

  pub fn reset_var_7681(&mut self) {
    self.var_7681 = None;
  }

  pub fn set_var_7682(&mut self, var_7682: String) {
    self.var_7682 = Some(var_7682);
  }

  pub fn with_var_7682(mut self, var_7682: String) -> InlineResponse20024 {
    self.var_7682 = Some(var_7682);
    self
  }

  pub fn var_7682(&self) -> Option<&String> {
    self.var_7682.as_ref()
  }

  pub fn reset_var_7682(&mut self) {
    self.var_7682 = None;
  }

  pub fn set_var_7683(&mut self, var_7683: String) {
    self.var_7683 = Some(var_7683);
  }

  pub fn with_var_7683(mut self, var_7683: String) -> InlineResponse20024 {
    self.var_7683 = Some(var_7683);
    self
  }

  pub fn var_7683(&self) -> Option<&String> {
    self.var_7683.as_ref()
  }

  pub fn reset_var_7683(&mut self) {
    self.var_7683 = None;
  }

  pub fn set_var_7684(&mut self, var_7684: String) {
    self.var_7684 = Some(var_7684);
  }

  pub fn with_var_7684(mut self, var_7684: String) -> InlineResponse20024 {
    self.var_7684 = Some(var_7684);
    self
  }

  pub fn var_7684(&self) -> Option<&String> {
    self.var_7684.as_ref()
  }

  pub fn reset_var_7684(&mut self) {
    self.var_7684 = None;
  }

  pub fn set_var_7685(&mut self, var_7685: String) {
    self.var_7685 = Some(var_7685);
  }

  pub fn with_var_7685(mut self, var_7685: String) -> InlineResponse20024 {
    self.var_7685 = Some(var_7685);
    self
  }

  pub fn var_7685(&self) -> Option<&String> {
    self.var_7685.as_ref()
  }

  pub fn reset_var_7685(&mut self) {
    self.var_7685 = None;
  }

  pub fn set_var_7686(&mut self, var_7686: String) {
    self.var_7686 = Some(var_7686);
  }

  pub fn with_var_7686(mut self, var_7686: String) -> InlineResponse20024 {
    self.var_7686 = Some(var_7686);
    self
  }

  pub fn var_7686(&self) -> Option<&String> {
    self.var_7686.as_ref()
  }

  pub fn reset_var_7686(&mut self) {
    self.var_7686 = None;
  }

  pub fn set_var_7687(&mut self, var_7687: String) {
    self.var_7687 = Some(var_7687);
  }

  pub fn with_var_7687(mut self, var_7687: String) -> InlineResponse20024 {
    self.var_7687 = Some(var_7687);
    self
  }

  pub fn var_7687(&self) -> Option<&String> {
    self.var_7687.as_ref()
  }

  pub fn reset_var_7687(&mut self) {
    self.var_7687 = None;
  }

  pub fn set_var_7688(&mut self, var_7688: String) {
    self.var_7688 = Some(var_7688);
  }

  pub fn with_var_7688(mut self, var_7688: String) -> InlineResponse20024 {
    self.var_7688 = Some(var_7688);
    self
  }

  pub fn var_7688(&self) -> Option<&String> {
    self.var_7688.as_ref()
  }

  pub fn reset_var_7688(&mut self) {
    self.var_7688 = None;
  }

  pub fn set_var_7689(&mut self, var_7689: String) {
    self.var_7689 = Some(var_7689);
  }

  pub fn with_var_7689(mut self, var_7689: String) -> InlineResponse20024 {
    self.var_7689 = Some(var_7689);
    self
  }

  pub fn var_7689(&self) -> Option<&String> {
    self.var_7689.as_ref()
  }

  pub fn reset_var_7689(&mut self) {
    self.var_7689 = None;
  }

  pub fn set_var_7690(&mut self, var_7690: String) {
    self.var_7690 = Some(var_7690);
  }

  pub fn with_var_7690(mut self, var_7690: String) -> InlineResponse20024 {
    self.var_7690 = Some(var_7690);
    self
  }

  pub fn var_7690(&self) -> Option<&String> {
    self.var_7690.as_ref()
  }

  pub fn reset_var_7690(&mut self) {
    self.var_7690 = None;
  }

  pub fn set_var_7694(&mut self, var_7694: String) {
    self.var_7694 = Some(var_7694);
  }

  pub fn with_var_7694(mut self, var_7694: String) -> InlineResponse20024 {
    self.var_7694 = Some(var_7694);
    self
  }

  pub fn var_7694(&self) -> Option<&String> {
    self.var_7694.as_ref()
  }

  pub fn reset_var_7694(&mut self) {
    self.var_7694 = None;
  }

  pub fn set_var_7695(&mut self, var_7695: String) {
    self.var_7695 = Some(var_7695);
  }

  pub fn with_var_7695(mut self, var_7695: String) -> InlineResponse20024 {
    self.var_7695 = Some(var_7695);
    self
  }

  pub fn var_7695(&self) -> Option<&String> {
    self.var_7695.as_ref()
  }

  pub fn reset_var_7695(&mut self) {
    self.var_7695 = None;
  }

  pub fn set_var_7696(&mut self, var_7696: String) {
    self.var_7696 = Some(var_7696);
  }

  pub fn with_var_7696(mut self, var_7696: String) -> InlineResponse20024 {
    self.var_7696 = Some(var_7696);
    self
  }

  pub fn var_7696(&self) -> Option<&String> {
    self.var_7696.as_ref()
  }

  pub fn reset_var_7696(&mut self) {
    self.var_7696 = None;
  }

  pub fn set_var_7697(&mut self, var_7697: String) {
    self.var_7697 = Some(var_7697);
  }

  pub fn with_var_7697(mut self, var_7697: String) -> InlineResponse20024 {
    self.var_7697 = Some(var_7697);
    self
  }

  pub fn var_7697(&self) -> Option<&String> {
    self.var_7697.as_ref()
  }

  pub fn reset_var_7697(&mut self) {
    self.var_7697 = None;
  }

  pub fn set_var_7698(&mut self, var_7698: String) {
    self.var_7698 = Some(var_7698);
  }

  pub fn with_var_7698(mut self, var_7698: String) -> InlineResponse20024 {
    self.var_7698 = Some(var_7698);
    self
  }

  pub fn var_7698(&self) -> Option<&String> {
    self.var_7698.as_ref()
  }

  pub fn reset_var_7698(&mut self) {
    self.var_7698 = None;
  }

  pub fn set_var_7699(&mut self, var_7699: String) {
    self.var_7699 = Some(var_7699);
  }

  pub fn with_var_7699(mut self, var_7699: String) -> InlineResponse20024 {
    self.var_7699 = Some(var_7699);
    self
  }

  pub fn var_7699(&self) -> Option<&String> {
    self.var_7699.as_ref()
  }

  pub fn reset_var_7699(&mut self) {
    self.var_7699 = None;
  }

  pub fn set_var_77(&mut self, var_77: String) {
    self.var_77 = Some(var_77);
  }

  pub fn with_var_77(mut self, var_77: String) -> InlineResponse20024 {
    self.var_77 = Some(var_77);
    self
  }

  pub fn var_77(&self) -> Option<&String> {
    self.var_77.as_ref()
  }

  pub fn reset_var_77(&mut self) {
    self.var_77 = None;
  }

  pub fn set_var_7700(&mut self, var_7700: String) {
    self.var_7700 = Some(var_7700);
  }

  pub fn with_var_7700(mut self, var_7700: String) -> InlineResponse20024 {
    self.var_7700 = Some(var_7700);
    self
  }

  pub fn var_7700(&self) -> Option<&String> {
    self.var_7700.as_ref()
  }

  pub fn reset_var_7700(&mut self) {
    self.var_7700 = None;
  }

  pub fn set_var_7702(&mut self, var_7702: String) {
    self.var_7702 = Some(var_7702);
  }

  pub fn with_var_7702(mut self, var_7702: String) -> InlineResponse20024 {
    self.var_7702 = Some(var_7702);
    self
  }

  pub fn var_7702(&self) -> Option<&String> {
    self.var_7702.as_ref()
  }

  pub fn reset_var_7702(&mut self) {
    self.var_7702 = None;
  }

  pub fn set_var_7703(&mut self, var_7703: String) {
    self.var_7703 = Some(var_7703);
  }

  pub fn with_var_7703(mut self, var_7703: String) -> InlineResponse20024 {
    self.var_7703 = Some(var_7703);
    self
  }

  pub fn var_7703(&self) -> Option<&String> {
    self.var_7703.as_ref()
  }

  pub fn reset_var_7703(&mut self) {
    self.var_7703 = None;
  }

  pub fn set_var_7704(&mut self, var_7704: String) {
    self.var_7704 = Some(var_7704);
  }

  pub fn with_var_7704(mut self, var_7704: String) -> InlineResponse20024 {
    self.var_7704 = Some(var_7704);
    self
  }

  pub fn var_7704(&self) -> Option<&String> {
    self.var_7704.as_ref()
  }

  pub fn reset_var_7704(&mut self) {
    self.var_7704 = None;
  }

  pub fn set_var_7705(&mut self, var_7705: String) {
    self.var_7705 = Some(var_7705);
  }

  pub fn with_var_7705(mut self, var_7705: String) -> InlineResponse20024 {
    self.var_7705 = Some(var_7705);
    self
  }

  pub fn var_7705(&self) -> Option<&String> {
    self.var_7705.as_ref()
  }

  pub fn reset_var_7705(&mut self) {
    self.var_7705 = None;
  }

  pub fn set_var_7706(&mut self, var_7706: String) {
    self.var_7706 = Some(var_7706);
  }

  pub fn with_var_7706(mut self, var_7706: String) -> InlineResponse20024 {
    self.var_7706 = Some(var_7706);
    self
  }

  pub fn var_7706(&self) -> Option<&String> {
    self.var_7706.as_ref()
  }

  pub fn reset_var_7706(&mut self) {
    self.var_7706 = None;
  }

  pub fn set_var_7707(&mut self, var_7707: String) {
    self.var_7707 = Some(var_7707);
  }

  pub fn with_var_7707(mut self, var_7707: String) -> InlineResponse20024 {
    self.var_7707 = Some(var_7707);
    self
  }

  pub fn var_7707(&self) -> Option<&String> {
    self.var_7707.as_ref()
  }

  pub fn reset_var_7707(&mut self) {
    self.var_7707 = None;
  }

  pub fn set_var_7708(&mut self, var_7708: String) {
    self.var_7708 = Some(var_7708);
  }

  pub fn with_var_7708(mut self, var_7708: String) -> InlineResponse20024 {
    self.var_7708 = Some(var_7708);
    self
  }

  pub fn var_7708(&self) -> Option<&String> {
    self.var_7708.as_ref()
  }

  pub fn reset_var_7708(&mut self) {
    self.var_7708 = None;
  }

  pub fn set_var_7714(&mut self, var_7714: String) {
    self.var_7714 = Some(var_7714);
  }

  pub fn with_var_7714(mut self, var_7714: String) -> InlineResponse20024 {
    self.var_7714 = Some(var_7714);
    self
  }

  pub fn var_7714(&self) -> Option<&String> {
    self.var_7714.as_ref()
  }

  pub fn reset_var_7714(&mut self) {
    self.var_7714 = None;
  }

  pub fn set_var_7715(&mut self, var_7715: String) {
    self.var_7715 = Some(var_7715);
  }

  pub fn with_var_7715(mut self, var_7715: String) -> InlineResponse20024 {
    self.var_7715 = Some(var_7715);
    self
  }

  pub fn var_7715(&self) -> Option<&String> {
    self.var_7715.as_ref()
  }

  pub fn reset_var_7715(&mut self) {
    self.var_7715 = None;
  }

  pub fn set_var_7718(&mut self, var_7718: String) {
    self.var_7718 = Some(var_7718);
  }

  pub fn with_var_7718(mut self, var_7718: String) -> InlineResponse20024 {
    self.var_7718 = Some(var_7718);
    self
  }

  pub fn var_7718(&self) -> Option<&String> {
    self.var_7718.as_ref()
  }

  pub fn reset_var_7718(&mut self) {
    self.var_7718 = None;
  }

  pub fn set_var_7720(&mut self, var_7720: String) {
    self.var_7720 = Some(var_7720);
  }

  pub fn with_var_7720(mut self, var_7720: String) -> InlineResponse20024 {
    self.var_7720 = Some(var_7720);
    self
  }

  pub fn var_7720(&self) -> Option<&String> {
    self.var_7720.as_ref()
  }

  pub fn reset_var_7720(&mut self) {
    self.var_7720 = None;
  }

  pub fn set_var_7741(&mut self, var_7741: String) {
    self.var_7741 = Some(var_7741);
  }

  pub fn with_var_7741(mut self, var_7741: String) -> InlineResponse20024 {
    self.var_7741 = Some(var_7741);
    self
  }

  pub fn var_7741(&self) -> Option<&String> {
    self.var_7741.as_ref()
  }

  pub fn reset_var_7741(&mut self) {
    self.var_7741 = None;
  }

  pub fn set_var_7762(&mut self, var_7762: String) {
    self.var_7762 = Some(var_7762);
  }

  pub fn with_var_7762(mut self, var_7762: String) -> InlineResponse20024 {
    self.var_7762 = Some(var_7762);
    self
  }

  pub fn var_7762(&self) -> Option<&String> {
    self.var_7762.as_ref()
  }

  pub fn reset_var_7762(&mut self) {
    self.var_7762 = None;
  }

  pub fn set_var_7768(&mut self, var_7768: String) {
    self.var_7768 = Some(var_7768);
  }

  pub fn with_var_7768(mut self, var_7768: String) -> InlineResponse20024 {
    self.var_7768 = Some(var_7768);
    self
  }

  pub fn var_7768(&self) -> Option<&String> {
    self.var_7768.as_ref()
  }

  pub fn reset_var_7768(&mut self) {
    self.var_7768 = None;
  }

  pub fn set_var_78(&mut self, var_78: String) {
    self.var_78 = Some(var_78);
  }

  pub fn with_var_78(mut self, var_78: String) -> InlineResponse20024 {
    self.var_78 = Some(var_78);
    self
  }

  pub fn var_78(&self) -> Option<&String> {
    self.var_78.as_ref()
  }

  pub fn reset_var_78(&mut self) {
    self.var_78 = None;
  }

  pub fn set_var_82(&mut self, var_82: String) {
    self.var_82 = Some(var_82);
  }

  pub fn with_var_82(mut self, var_82: String) -> InlineResponse20024 {
    self.var_82 = Some(var_82);
    self
  }

  pub fn var_82(&self) -> Option<&String> {
    self.var_82.as_ref()
  }

  pub fn reset_var_82(&mut self) {
    self.var_82 = None;
  }

  pub fn set_var_83(&mut self, var_83: String) {
    self.var_83 = Some(var_83);
  }

  pub fn with_var_83(mut self, var_83: String) -> InlineResponse20024 {
    self.var_83 = Some(var_83);
    self
  }

  pub fn var_83(&self) -> Option<&String> {
    self.var_83.as_ref()
  }

  pub fn reset_var_83(&mut self) {
    self.var_83 = None;
  }

  pub fn set_var_84(&mut self, var_84: String) {
    self.var_84 = Some(var_84);
  }

  pub fn with_var_84(mut self, var_84: String) -> InlineResponse20024 {
    self.var_84 = Some(var_84);
    self
  }

  pub fn var_84(&self) -> Option<&String> {
    self.var_84.as_ref()
  }

  pub fn reset_var_84(&mut self) {
    self.var_84 = None;
  }

  pub fn set_var_85(&mut self, var_85: String) {
    self.var_85 = Some(var_85);
  }

  pub fn with_var_85(mut self, var_85: String) -> InlineResponse20024 {
    self.var_85 = Some(var_85);
    self
  }

  pub fn var_85(&self) -> Option<&String> {
    self.var_85.as_ref()
  }

  pub fn reset_var_85(&mut self) {
    self.var_85 = None;
  }

  pub fn set_var_86(&mut self, var_86: String) {
    self.var_86 = Some(var_86);
  }

  pub fn with_var_86(mut self, var_86: String) -> InlineResponse20024 {
    self.var_86 = Some(var_86);
    self
  }

  pub fn var_86(&self) -> Option<&String> {
    self.var_86.as_ref()
  }

  pub fn reset_var_86(&mut self) {
    self.var_86 = None;
  }

  pub fn set_var_87(&mut self, var_87: String) {
    self.var_87 = Some(var_87);
  }

  pub fn with_var_87(mut self, var_87: String) -> InlineResponse20024 {
    self.var_87 = Some(var_87);
    self
  }

  pub fn var_87(&self) -> Option<&String> {
    self.var_87.as_ref()
  }

  pub fn reset_var_87(&mut self) {
    self.var_87 = None;
  }

  pub fn set_var_87_raw__deprecated(&mut self, var_87_raw__deprecated: String) {
    self.var_87_raw__deprecated = Some(var_87_raw__deprecated);
  }

  pub fn with_var_87_raw__deprecated(mut self, var_87_raw__deprecated: String) -> InlineResponse20024 {
    self.var_87_raw__deprecated = Some(var_87_raw__deprecated);
    self
  }

  pub fn var_87_raw__deprecated(&self) -> Option<&String> {
    self.var_87_raw__deprecated.as_ref()
  }

  pub fn reset_var_87_raw__deprecated(&mut self) {
    self.var_87_raw__deprecated = None;
  }

  pub fn set_var_88(&mut self, var_88: String) {
    self.var_88 = Some(var_88);
  }

  pub fn with_var_88(mut self, var_88: String) -> InlineResponse20024 {
    self.var_88 = Some(var_88);
    self
  }

  pub fn var_88(&self) -> Option<&String> {
    self.var_88.as_ref()
  }

  pub fn reset_var_88(&mut self) {
    self.var_88 = None;
  }

  pub fn set__updated(&mut self, _updated: i32) {
    self._updated = Some(_updated);
  }

  pub fn with__updated(mut self, _updated: i32) -> InlineResponse20024 {
    self._updated = Some(_updated);
    self
  }

  pub fn _updated(&self) -> Option<&i32> {
    self._updated.as_ref()
  }

  pub fn reset__updated(&mut self) {
    self._updated = None;
  }

  pub fn set_conid(&mut self, conid: i32) {
    self.conid = Some(conid);
  }

  pub fn with_conid(mut self, conid: i32) -> InlineResponse20024 {
    self.conid = Some(conid);
    self
  }

  pub fn conid(&self) -> Option<&i32> {
    self.conid.as_ref()
  }

  pub fn reset_conid(&mut self) {
    self.conid = None;
  }

  pub fn set_server_id(&mut self, server_id: String) {
    self.server_id = Some(server_id);
  }

  pub fn with_server_id(mut self, server_id: String) -> InlineResponse20024 {
    self.server_id = Some(server_id);
    self
  }

  pub fn server_id(&self) -> Option<&String> {
    self.server_id.as_ref()
  }

  pub fn reset_server_id(&mut self) {
    self.server_id = None;
  }

}



