/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InlineResponse20037TradingTimes : Returns tradingTime in exchange time zone.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse20037TradingTimes {
  #[serde(rename = "cancelDayOrders")]
  cancel_day_orders: Option<String>,
  #[serde(rename = "closingTime")]
  closing_time: Option<i32>,
  #[serde(rename = "openingTime")]
  opening_time: Option<i32>
}

impl InlineResponse20037TradingTimes {
  /// Returns tradingTime in exchange time zone.
  pub fn new() -> InlineResponse20037TradingTimes {
    InlineResponse20037TradingTimes {
      cancel_day_orders: None,
      closing_time: None,
      opening_time: None
    }
  }

  pub fn set_cancel_day_orders(&mut self, cancel_day_orders: String) {
    self.cancel_day_orders = Some(cancel_day_orders);
  }

  pub fn with_cancel_day_orders(mut self, cancel_day_orders: String) -> InlineResponse20037TradingTimes {
    self.cancel_day_orders = Some(cancel_day_orders);
    self
  }

  pub fn cancel_day_orders(&self) -> Option<&String> {
    self.cancel_day_orders.as_ref()
  }

  pub fn reset_cancel_day_orders(&mut self) {
    self.cancel_day_orders = None;
  }

  pub fn set_closing_time(&mut self, closing_time: i32) {
    self.closing_time = Some(closing_time);
  }

  pub fn with_closing_time(mut self, closing_time: i32) -> InlineResponse20037TradingTimes {
    self.closing_time = Some(closing_time);
    self
  }

  pub fn closing_time(&self) -> Option<&i32> {
    self.closing_time.as_ref()
  }

  pub fn reset_closing_time(&mut self) {
    self.closing_time = None;
  }

  pub fn set_opening_time(&mut self, opening_time: i32) {
    self.opening_time = Some(opening_time);
  }

  pub fn with_opening_time(mut self, opening_time: i32) -> InlineResponse20037TradingTimes {
    self.opening_time = Some(opening_time);
    self
  }

  pub fn opening_time(&self) -> Option<&i32> {
    self.opening_time.as_ref()
  }

  pub fn reset_opening_time(&mut self) {
    self.opening_time = None;
  }

}



