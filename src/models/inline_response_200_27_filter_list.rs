/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse20027FilterList {
  #[serde(rename = "code")]
  code: Option<String>,
  #[serde(rename = "display_name")]
  display_name: Option<String>,
  #[serde(rename = "group")]
  group: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>
}

impl InlineResponse20027FilterList {
  pub fn new() -> InlineResponse20027FilterList {
    InlineResponse20027FilterList {
      code: None,
      display_name: None,
      group: None,
      _type: None
    }
  }

  pub fn set_code(&mut self, code: String) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: String) -> InlineResponse20027FilterList {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&String> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> InlineResponse20027FilterList {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_group(&mut self, group: String) {
    self.group = Some(group);
  }

  pub fn with_group(mut self, group: String) -> InlineResponse20027FilterList {
    self.group = Some(group);
    self
  }

  pub fn group(&self) -> Option<&String> {
    self.group.as_ref()
  }

  pub fn reset_group(&mut self) {
    self.group = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> InlineResponse20027FilterList {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



