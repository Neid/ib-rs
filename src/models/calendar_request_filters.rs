/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CalendarRequestFilters {
  /// value can be 'true' or 'false'.
  #[serde(rename = "DivExDates")]
  div_ex_dates: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "corporate_earnings")]
  corporate_earnings: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "corporate_events")]
  corporate_events: Option<String>,
  /// default is 'All'.
  #[serde(rename = "country")]
  country: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "economic_events")]
  economic_events: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "ipo")]
  ipo: Option<String>,
  /// default is '250'.
  #[serde(rename = "limit")]
  limit: Option<String>,
  /// default is '50'.
  #[serde(rename = "limit_region")]
  limit_region: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "option_show_monthly")]
  option_show_monthly: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "option_show_weekly")]
  option_show_weekly: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "recently_held")]
  recently_held: Option<String>,
  /// value can be 'true' or 'false'.
  #[serde(rename = "splits")]
  splits: Option<String>
}

impl CalendarRequestFilters {
  pub fn new() -> CalendarRequestFilters {
    CalendarRequestFilters {
      div_ex_dates: None,
      corporate_earnings: None,
      corporate_events: None,
      country: None,
      economic_events: None,
      ipo: None,
      limit: None,
      limit_region: None,
      option_show_monthly: None,
      option_show_weekly: None,
      recently_held: None,
      splits: None
    }
  }

  pub fn set_div_ex_dates(&mut self, div_ex_dates: String) {
    self.div_ex_dates = Some(div_ex_dates);
  }

  pub fn with_div_ex_dates(mut self, div_ex_dates: String) -> CalendarRequestFilters {
    self.div_ex_dates = Some(div_ex_dates);
    self
  }

  pub fn div_ex_dates(&self) -> Option<&String> {
    self.div_ex_dates.as_ref()
  }

  pub fn reset_div_ex_dates(&mut self) {
    self.div_ex_dates = None;
  }

  pub fn set_corporate_earnings(&mut self, corporate_earnings: String) {
    self.corporate_earnings = Some(corporate_earnings);
  }

  pub fn with_corporate_earnings(mut self, corporate_earnings: String) -> CalendarRequestFilters {
    self.corporate_earnings = Some(corporate_earnings);
    self
  }

  pub fn corporate_earnings(&self) -> Option<&String> {
    self.corporate_earnings.as_ref()
  }

  pub fn reset_corporate_earnings(&mut self) {
    self.corporate_earnings = None;
  }

  pub fn set_corporate_events(&mut self, corporate_events: String) {
    self.corporate_events = Some(corporate_events);
  }

  pub fn with_corporate_events(mut self, corporate_events: String) -> CalendarRequestFilters {
    self.corporate_events = Some(corporate_events);
    self
  }

  pub fn corporate_events(&self) -> Option<&String> {
    self.corporate_events.as_ref()
  }

  pub fn reset_corporate_events(&mut self) {
    self.corporate_events = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> CalendarRequestFilters {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_economic_events(&mut self, economic_events: String) {
    self.economic_events = Some(economic_events);
  }

  pub fn with_economic_events(mut self, economic_events: String) -> CalendarRequestFilters {
    self.economic_events = Some(economic_events);
    self
  }

  pub fn economic_events(&self) -> Option<&String> {
    self.economic_events.as_ref()
  }

  pub fn reset_economic_events(&mut self) {
    self.economic_events = None;
  }

  pub fn set_ipo(&mut self, ipo: String) {
    self.ipo = Some(ipo);
  }

  pub fn with_ipo(mut self, ipo: String) -> CalendarRequestFilters {
    self.ipo = Some(ipo);
    self
  }

  pub fn ipo(&self) -> Option<&String> {
    self.ipo.as_ref()
  }

  pub fn reset_ipo(&mut self) {
    self.ipo = None;
  }

  pub fn set_limit(&mut self, limit: String) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: String) -> CalendarRequestFilters {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&String> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

  pub fn set_limit_region(&mut self, limit_region: String) {
    self.limit_region = Some(limit_region);
  }

  pub fn with_limit_region(mut self, limit_region: String) -> CalendarRequestFilters {
    self.limit_region = Some(limit_region);
    self
  }

  pub fn limit_region(&self) -> Option<&String> {
    self.limit_region.as_ref()
  }

  pub fn reset_limit_region(&mut self) {
    self.limit_region = None;
  }

  pub fn set_option_show_monthly(&mut self, option_show_monthly: String) {
    self.option_show_monthly = Some(option_show_monthly);
  }

  pub fn with_option_show_monthly(mut self, option_show_monthly: String) -> CalendarRequestFilters {
    self.option_show_monthly = Some(option_show_monthly);
    self
  }

  pub fn option_show_monthly(&self) -> Option<&String> {
    self.option_show_monthly.as_ref()
  }

  pub fn reset_option_show_monthly(&mut self) {
    self.option_show_monthly = None;
  }

  pub fn set_option_show_weekly(&mut self, option_show_weekly: String) {
    self.option_show_weekly = Some(option_show_weekly);
  }

  pub fn with_option_show_weekly(mut self, option_show_weekly: String) -> CalendarRequestFilters {
    self.option_show_weekly = Some(option_show_weekly);
    self
  }

  pub fn option_show_weekly(&self) -> Option<&String> {
    self.option_show_weekly.as_ref()
  }

  pub fn reset_option_show_weekly(&mut self) {
    self.option_show_weekly = None;
  }

  pub fn set_recently_held(&mut self, recently_held: String) {
    self.recently_held = Some(recently_held);
  }

  pub fn with_recently_held(mut self, recently_held: String) -> CalendarRequestFilters {
    self.recently_held = Some(recently_held);
    self
  }

  pub fn recently_held(&self) -> Option<&String> {
    self.recently_held.as_ref()
  }

  pub fn reset_recently_held(&mut self) {
    self.recently_held = None;
  }

  pub fn set_splits(&mut self, splits: String) {
    self.splits = Some(splits);
  }

  pub fn with_splits(mut self, splits: String) -> CalendarRequestFilters {
    self.splits = Some(splits);
    self
  }

  pub fn splits(&self) -> Option<&String> {
    self.splits.as_ref()
  }

  pub fn reset_splits(&mut self) {
    self.splits = None;
  }

}



