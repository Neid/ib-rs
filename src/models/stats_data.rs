/* 
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StatsData {
  #[serde(rename = "Conid")]
  conid: Option<f32>,
  #[serde(rename = "Exchange")]
  exchange: Option<String>,
  /// Object, payload depends on event type. See confluence page for IGEvntUpd.
  #[serde(rename = "P")]
  P: Option<String>,
  #[serde(rename = "T")]
  T: Option<f32>,
  #[serde(rename = "TT")]
  TT: Option<f32>,
  #[serde(rename = "V")]
  V: Option<f32>
}

impl StatsData {
  pub fn new() -> StatsData {
    StatsData {
      conid: None,
      exchange: None,
      P: None,
      T: None,
      TT: None,
      V: None
    }
  }

  pub fn set_conid(&mut self, conid: f32) {
    self.conid = Some(conid);
  }

  pub fn with_conid(mut self, conid: f32) -> StatsData {
    self.conid = Some(conid);
    self
  }

  pub fn conid(&self) -> Option<&f32> {
    self.conid.as_ref()
  }

  pub fn reset_conid(&mut self) {
    self.conid = None;
  }

  pub fn set_exchange(&mut self, exchange: String) {
    self.exchange = Some(exchange);
  }

  pub fn with_exchange(mut self, exchange: String) -> StatsData {
    self.exchange = Some(exchange);
    self
  }

  pub fn exchange(&self) -> Option<&String> {
    self.exchange.as_ref()
  }

  pub fn reset_exchange(&mut self) {
    self.exchange = None;
  }

  pub fn set_P(&mut self, P: String) {
    self.P = Some(P);
  }

  pub fn with_P(mut self, P: String) -> StatsData {
    self.P = Some(P);
    self
  }

  pub fn P(&self) -> Option<&String> {
    self.P.as_ref()
  }

  pub fn reset_P(&mut self) {
    self.P = None;
  }

  pub fn set_T(&mut self, T: f32) {
    self.T = Some(T);
  }

  pub fn with_T(mut self, T: f32) -> StatsData {
    self.T = Some(T);
    self
  }

  pub fn T(&self) -> Option<&f32> {
    self.T.as_ref()
  }

  pub fn reset_T(&mut self) {
    self.T = None;
  }

  pub fn set_TT(&mut self, TT: f32) {
    self.TT = Some(TT);
  }

  pub fn with_TT(mut self, TT: f32) -> StatsData {
    self.TT = Some(TT);
    self
  }

  pub fn TT(&self) -> Option<&f32> {
    self.TT.as_ref()
  }

  pub fn reset_TT(&mut self) {
    self.TT = None;
  }

  pub fn set_V(&mut self, V: f32) {
    self.V = Some(V);
  }

  pub fn with_V(mut self, V: f32) -> StatsData {
    self.V = Some(V);
    self
  }

  pub fn V(&self) -> Option<&f32> {
    self.V.as_ref()
  }

  pub fn reset_V(&mut self) {
    self.V = None;
  }

}



